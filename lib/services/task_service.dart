import 'package:hive_flutter/hive_flutter.dart';
import 'package:ordo/core/constants.dart';
import 'package:ordo/models/task_model.dart';

class TaskService {
  late Box<Task> _taskBox;

  Future<void> init() async {
    // The adapters should be generated by build_runner
    if (!Hive.isAdapterRegistered(TaskAdapter().typeId)) {
      Hive.registerAdapter(TaskAdapter());
    }
    if (!Hive.isAdapterRegistered(PriorityAdapter().typeId)) {
      Hive.registerAdapter(PriorityAdapter());
    }

    _taskBox = await Hive.openBox<Task>(AppConstants.tasksBoxName);
  }

  List<Task> getTasks({String? query, bool? completed}) {
    var tasks = _taskBox.values.toList();
    // Sorting: Incomplete tasks first, then by date
    tasks.sort((a, b) {
      if (a.isCompleted != b.isCompleted) {
        return a.isCompleted ? 1 : -1;
      }
      return b.creationDate.compareTo(a.creationDate);
    });
    return tasks;
  }

  Future<void> addTask(Task task) async {
    await _taskBox.put(task.id, task);
  }

  Future<void> updateTask(Task task) async {
    // HiveObjects linked to a box can be updated with save()
    await task.save();
  }

  Future<void> toggleTaskCompleted(String id) async {
    final task = _taskBox.get(id);
    if (task != null) {
      task.isCompleted = !task.isCompleted;
      await task.save();
    }
  }

  Future<void> deleteTask(String id) async {
    await _taskBox.delete(id);
  }

  Future<void> clearAllTasks() async {
    await _taskBox.clear();
  }
}
